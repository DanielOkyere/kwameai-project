/* tslint:disable */
/* eslint-disable */
/**
 * simpleblogcms
 * simpleblogcms API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Post } from '../models';
// @ts-ignore
import { Postcreate } from '../models';
// @ts-ignore
import { Postupdate } from '../models';
/**
 * PostsApi - axios parameter creator
 * @export
 */
export const PostsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Post
         * @param {Postcreate} postcreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: async (postcreate: Postcreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postcreate' is not null or undefined
            assertParamExists('createPost', 'postcreate', postcreate)
            const localVarPath = `/api/v1/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postcreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Post
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost: async (postId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('deletePost', 'postId', postId)
            const localVarPath = `/api/v1/posts/{post_id}`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Post
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPost: async (postId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('getPost', 'postId', postId)
            const localVarPath = `/api/v1/posts/{post_id}`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Posts
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts: async (sort?: string, range?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (range !== undefined) {
                localVarQueryParameter['range'] = range;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Post
         * @param {number} postId 
         * @param {Postupdate} postupdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePost: async (postId: number, postupdate: Postupdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('updatePost', 'postId', postId)
            // verify required parameter 'postupdate' is not null or undefined
            assertParamExists('updatePost', 'postupdate', postupdate)
            const localVarPath = `/api/v1/posts/{post_id}`
                .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postupdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostsApi - functional programming interface
 * @export
 */
export const PostsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Post
         * @param {Postcreate} postcreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPost(postcreate: Postcreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(postcreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Post
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePost(postId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePost(postId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Post
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPost(postId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPost(postId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Posts
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPosts(sort?: string, range?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Post>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPosts(sort, range, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Post
         * @param {number} postId 
         * @param {Postupdate} postupdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePost(postId: number, postupdate: Postupdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePost(postId, postupdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PostsApi - factory interface
 * @export
 */
export const PostsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Post
         * @param {Postcreate} postcreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(postcreate: Postcreate, options?: any): AxiosPromise<Post> {
            return localVarFp.createPost(postcreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Post
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost(postId: number, options?: any): AxiosPromise<any> {
            return localVarFp.deletePost(postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Post
         * @param {number} postId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPost(postId: number, options?: any): AxiosPromise<Post> {
            return localVarFp.getPost(postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Posts
         * @param {string} [sort] Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
         * @param {string} [range] Format: &#x60;[start, end]&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts(sort?: string, range?: string, options?: any): AxiosPromise<Array<Post>> {
            return localVarFp.getPosts(sort, range, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Post
         * @param {number} postId 
         * @param {Postupdate} postupdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePost(postId: number, postupdate: Postupdate, options?: any): AxiosPromise<Post> {
            return localVarFp.updatePost(postId, postupdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPost operation in PostsApi.
 * @export
 * @interface PostsApiCreatePostRequest
 */
export interface PostsApiCreatePostRequest {
    /**
     * 
     * @type {Postcreate}
     * @memberof PostsApiCreatePost
     */
    readonly postcreate: Postcreate
}

/**
 * Request parameters for deletePost operation in PostsApi.
 * @export
 * @interface PostsApiDeletePostRequest
 */
export interface PostsApiDeletePostRequest {
    /**
     * 
     * @type {number}
     * @memberof PostsApiDeletePost
     */
    readonly postId: number
}

/**
 * Request parameters for getPost operation in PostsApi.
 * @export
 * @interface PostsApiGetPostRequest
 */
export interface PostsApiGetPostRequest {
    /**
     * 
     * @type {number}
     * @memberof PostsApiGetPost
     */
    readonly postId: number
}

/**
 * Request parameters for getPosts operation in PostsApi.
 * @export
 * @interface PostsApiGetPostsRequest
 */
export interface PostsApiGetPostsRequest {
    /**
     * Format: &#x60;[\&quot;field_name\&quot;, \&quot;direction\&quot;]&#x60;
     * @type {string}
     * @memberof PostsApiGetPosts
     */
    readonly sort?: string

    /**
     * Format: &#x60;[start, end]&#x60;
     * @type {string}
     * @memberof PostsApiGetPosts
     */
    readonly range?: string
}

/**
 * Request parameters for updatePost operation in PostsApi.
 * @export
 * @interface PostsApiUpdatePostRequest
 */
export interface PostsApiUpdatePostRequest {
    /**
     * 
     * @type {number}
     * @memberof PostsApiUpdatePost
     */
    readonly postId: number

    /**
     * 
     * @type {Postupdate}
     * @memberof PostsApiUpdatePost
     */
    readonly postupdate: Postupdate
}

/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
export class PostsApi extends BaseAPI {
    /**
     * 
     * @summary Create Post
     * @param {PostsApiCreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public createPost(requestParameters: PostsApiCreatePostRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).createPost(requestParameters.postcreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Post
     * @param {PostsApiDeletePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public deletePost(requestParameters: PostsApiDeletePostRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).deletePost(requestParameters.postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Post
     * @param {PostsApiGetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public getPost(requestParameters: PostsApiGetPostRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).getPost(requestParameters.postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Posts
     * @param {PostsApiGetPostsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public getPosts(requestParameters: PostsApiGetPostsRequest = {}, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).getPosts(requestParameters.sort, requestParameters.range, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Post
     * @param {PostsApiUpdatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsApi
     */
    public updatePost(requestParameters: PostsApiUpdatePostRequest, options?: AxiosRequestConfig) {
        return PostsApiFp(this.configuration).updatePost(requestParameters.postId, requestParameters.postupdate, options).then((request) => request(this.axios, this.basePath));
    }
}
